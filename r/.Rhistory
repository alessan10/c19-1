library(ggplot2)
myplot1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
myplot2 <- ggplot(iris, aes(Species, Sepal.Length)) +
geom_boxplot()
# Print plots to a pdf file
pdf("ggplot.pdf")
print(myplot1)     # Plot 1 --> in the first page of PDF
print(myplot2)     # Plot 2 ---> in the second page of the PDF
dev.off()
library(ggplot2)
myplot1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
myplot2 <- ggplot(iris, aes(Species, Sepal.Length)) +
geom_boxplot()
# Print plots to a pdf file
pdf("ggplot.pdf")
print(myplot1)     # Plot 1 --> in the first page of PDF
print(myplot2)     # Plot 2 ---> in the second page of the PDF
dev.off()
library(ggplot2)
myplot1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
myplot2 <- ggplot(iris, aes(Species, Sepal.Length)) +
geom_boxplot()
# Print plots to a pdf file
#pdf("ggplot.pdf")
#print(myplot1)     # Plot 1 --> in the first page of PDF
#print(myplot2)     # Plot 2 ---> in the second page of the PDF
#dev.off()
# print to a png file
png("myplot.png")
print(myplot)
dev.off(
library(ggplot2)
myplot1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
myplot2 <- ggplot(iris, aes(Species, Sepal.Length)) +
geom_boxplot()
# Print plots to a pdf file
#pdf("ggplot.pdf")
#print(myplot1)     # Plot 1 --> in the first page of PDF
#print(myplot2)     # Plot 2 ---> in the second page of the PDF
#dev.off()
# print to a png file
png("myplot.png")
print(myplot1)
print(myplot2)
dev.off()
# print to a png file
png("myplot.png")
print(myplot1)
dev.off()
# print to a png file
png("myplot.jpeg")
print(myplot1)
dev.off()
# print to a png file
png("myplot.jpg")
print(myplot1)
dev.off()
library(ggplot2)
myplot1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
myplot2 <- ggplot(iris, aes(Species, Sepal.Length)) +
geom_boxplot()
# print to a jpg file
png("myplot.jpg")
print(myplot1)
dev.off()
fpath <-system.file('D:/Alessandro/uniCT/Magistrale/Secondo_Anno/1_Advanced_Programming_Languages/Progetto_Esame/git_c19/c19/r/myplot.jpg')
load.image(fpath)
library(imager)
#load the created jpg
fpath <-system.file('D:/Alessandro/uniCT/Magistrale/Secondo_Anno/1_Advanced_Programming_Languages/Progetto_Esame/git_c19/c19/r/myplot.jpg')
load.image(fpath)
#load the created jpg
fpath <- system.file('D:/Alessandro/uniCT/Magistrale/Secondo_Anno/1_Advanced_Programming_Languages/Progetto_Esame/git_c19/c19/r/myplot.jpg')
load.image(fpath)
fpath <- system.file('D:/Alessandro/uniCT/Magistrale/Secondo_Anno/1_Advanced_Programming_Languages/Progetto_Esame/git_c19/c19/r/myplot.jpg')
fpath <- system.file("D:/Alessandro/uniCT/Magistrale/Secondo_Anno/1_Advanced_Programming_Languages/Progetto_Esame/git_c19/c19/r/myplot.jpg")
load.image(fpath)
fpath <- system.file('D:/',... ='Alessandro/uniCT/Magistrale/Secondo_Anno/1_Advanced_Programming_Languages/Progetto_Esame/git_c19/c19/r/myplot.jpg' )
fpath <- system.file('D:/')
fpath <- system.file('C:\users')
fpath <- system.file('C:/users')
rm(fpath)
path = system.file("D:\minion.jpg")
path = system.file("D:/minion.jpg")
path = system.file("D:/")
path
rm(path)
fpath <- system.file('D:/Alessandro/uniCT/Magistrale/Secondo_Anno/1_Advanced_Programming_Languages/Progetto_Esame/git_c19/c19/r/myplot.jpg',package='imager')
load.image(fpath)
fpath <- system.file('D:/Alessandro/uniCT/Magistrale/Secondo_Anno/1_Advanced_Programming_Languages/Progetto_Esame/git_c19/c19/r/myplot.jpg',full.names = T)
load.image(fpath)
fpath <- system.file('myplot.jpg')
load.image(fpath)
fpath <- system.file('~/myplot.jpg')
fpath <- system.file('~/myplot.jpg')
load.image(fpath)
fpath <- system.file('D:/Alessandro/uniCT/Magistrale/Secondo_Anno/1_Advanced_Programming_Languages/Progetto_Esame/git_c19/c19/r',pattern="*.jpg",full.names = T)
fpath <- system.file('D:/Alessandro/uniCT/Magistrale/Secondo_Anno/1_Advanced_Programming_Languages/Progetto_Esame/git_c19/c19/r',pattern="*.jpg",full.names = T)
load.image(fpath)
fpath <- system.file("D:/Alessandro/uniCT/Magistrale/Secondo_Anno/1_Advanced_Programming_Languages/Progetto_Esame/git_c19/c19/r")
load.image(fpath)
library(ggplot2)
library(imager)
myplot1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
myplot2 <- ggplot(iris, aes(Species, Sepal.Length)) +
geom_boxplot()
myplot2 <- ggplot(iris, aes(Species, Sepal.Length)) +
geom_boxplot()
print(myplot1)
gr = choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
library(cartography)
# Load data
#data(nuts2006)
# Build a choropleth
#choroLayer(spdf = nuts0.spdf, df = nuts0.df, var = "death_2008" , legend.pos = "right")
#title("Population in 2008")
#my version
data = read.csv("C:/Users/alexm/Downloads/out.csv") #importo il dataframe
data.positive.bycountry = subset(data, Covid == "positivo", select = c(Country, Covid)) #creo un subset con solo i positivi
country.vector = data.positive.bycountry$Country #metto le country in un vettore
country.vector.counter = table(country.vector) #conto quante sono
new.df = as.data.frame.table(country.vector.counter) #trasformo in un dataframe la tabella dove ho conteggiato le country
gr = choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
title("Positive by Country")
gr = choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
library(ggplot2)
library(imager)
myplot1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
myplot2 <- ggplot(iris, aes(Species, Sepal.Length)) +
geom_boxplot()
# print to a jpg file
png("myplot.jpg")
print(myplot1)
dev.off()
png("geoplot.jpg")
print(gr)
dev.off()
png("geoplot.png")
print(gr)
dev.off()
jpg("geoplot.jpg")
print(gr)
dev.off()
library(cartography)
# Load data
#data(nuts2006)
# Build a choropleth
#choroLayer(spdf = nuts0.spdf, df = nuts0.df, var = "death_2008" , legend.pos = "right")
#title("Population in 2008")
#my version
data = read.csv("C:/Users/alexm/Downloads/out.csv") #importo il dataframe
data.positive.bycountry = subset(data, Covid == "positivo", select = c(Country, Covid)) #creo un subset con solo i positivi
country.vector = data.positive.bycountry$Country #metto le country in un vettore
country.vector.counter = table(country.vector) #conto quante sono
new.df = as.data.frame.table(country.vector.counter) #trasformo in un dataframe la tabella dove ho conteggiato le country
gr = choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
title("Positive by Country")
gr = choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
rm(gr)
gr = choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
jpg("geoplot.jpg")
print(gr)
dev.off()
data = read.csv("C:/Users/alexm/Downloads/out.csv") #importo il dataframe
data.positive.bycountry = subset(data, Covid == "positivo", select = c(Country, Covid)) #creo un subset con solo i positivi
country.vector = data.positive.bycountry$Country #metto le country in un vettore
country.vector.counter = table(country.vector) #conto quante sono
new.df = as.data.frame.table(country.vector.counter) #trasformo in un dataframe la tabella dove ho conteggiato le country
choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
title("Positive by Country")
jpeg("rplot.jpg", width = 350, height = "350")
choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
title("Positive by Country")
dev.off()
rm(gr)
jpeg("rplot.jpg", width = 350, height = "350")
jpeg("rplot.jpg", width = 350, height = 350)
choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
title("Positive by Country")
dev.off()
rm(data)
rm(data.positive.bycountry)
rm(myplot1)
rm(myplot2)
rm(new.df)
rm(country.vector)
rm(country.vector.counter)
library(cartography)
# Load data
#data(nuts2006)
# Build a choropleth
#choroLayer(spdf = nuts0.spdf, df = nuts0.df, var = "death_2008" , legend.pos = "right")
#title("Population in 2008")
#my version
data = read.csv("C:/Users/alexm/Downloads/out.csv") #importo il dataframe
data.positive.bycountry = subset(data, Covid == "positivo", select = c(Country, Covid)) #creo un subset con solo i positivi
country.vector = data.positive.bycountry$Country #metto le country in un vettore
country.vector.counter = table(country.vector) #conto quante sono
new.df = as.data.frame.table(country.vector.counter) #trasformo in un dataframe la tabella dove ho conteggiato le country
jpeg("rplot.jpg", width = 350, height = 350)
choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
title("Positive by Country")
dev.off()
choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
jpeg("rplot.jpg", width = 640, height = 480)
choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
title("Positive by Country")
dev.off()
jpeg("rplot.jpg", width = 800, height = 600)
choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
title("Positive by Country")
dev.off()
jpeg("rplot.jpg", width = 1024, height = 768)
choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
title("Positive by Country")
dev.off()
library(cartography)
# Load data
#data(nuts2006)
# Build a choropleth
#choroLayer(spdf = nuts0.spdf, df = nuts0.df, var = "death_2008" , legend.pos = "right")
#title("Population in 2008")
#my version
data = read.csv("C:/Users/alexm/Downloads/out.csv") #importo il dataframe
data.positive.bycountry = subset(data, Covid == "positivo", select = c(Country, Covid)) #creo un subset con solo i positivi
country.vector = data.positive.bycountry$Country #metto le country in un vettore
country.vector.counter = table(country.vector) #conto quante sono
new.df = as.data.frame.table(country.vector.counter) #trasformo in un dataframe la tabella dove ho conteggiato le country
jpeg("rplot.jpg", width = 1024, height = 768)
choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
title("Positive by Country")
dev.off()
library(cartography)
# Load data
#data(nuts2006)
# Build a choropleth
#choroLayer(spdf = nuts0.spdf, df = nuts0.df, var = "death_2008" , legend.pos = "right")
#title("Population in 2008")
#my version
data = read.csv("C:/Users/alexm/Downloads/out.csv") #importo il dataframe
data.positive.bycountry = subset(data, Covid == "positivo", select = c(Country, Covid)) #creo un subset con solo i positivi
country.vector = data.positive.bycountry$Country #metto le country in un vettore
country.vector.counter = table(country.vector) #conto quante sono
new.df = as.data.frame.table(country.vector.counter) #trasformo in un dataframe la tabella dove ho conteggiato le country
jpeg("geograpichal_plot.jpg", width = 1024, height = 768)
choroLayer(spdf = nuts0.spdf, df = new.df, var = "Freq" , legend.pos = "right") #plotto
title("Positive by Country")
dev.off()
rm(data)
rm(data.positive.bycountry)
rm(new.df)
rm(country.vector)
rm(country.vector.counter)
data = read.csv("C:/Users/alexm/Downloads/out.csv") #leggo il file
data.ordered = data[order(match(data$Mese, month.abb)),] #ordino in base ai mesi
data.positive = subset(data.ordered, Covid == "positivo", select = c(Id, Nome, Cognome, Age, ChatId, Covid, Anno, Mese, Giorno, Weekday, Country)) #creo un subset con solo i positivi
data.positive.year20 = with(data.positive, data.positive[(Anno == "2020"),]) #prendo solo i positivi del 2020
month.vector.20 = data.positive.year20$Mese #estraggo i mesi del 2020 in un vettore
month.vector.20.counter = table(month.vector.20) #conto quante volte si ripete ciascun mese nel 2020
barplot(month.vector.20.counter, ylab = "positivi", xlab="mesi 2020")
barplot(month.vector.20.counter, ylab = "positivi", xlab="mesi 2020")
data.positive
rm(data)
rm(data.ordered)
rm(data.positive)
rm(data.positive.year20)
rm(month.vector.20)
rm(month.vector.20.counter)
data = read.csv("C:/Users/alexm/Downloads/out.csv") #leggo il file
data.ordered = data[order(match(data$Mese, month.abb)),] #ordino in base ai mesi
data.positive = subset(data.ordered, Covid == "positivo", select = c(Id, Nome, Cognome, Age, ChatId, Covid, Anno, Mese, Giorno, Weekday, Country)) #creo un subset con solo i positivi
data.positive.year20 = with(data.positive, data.positive[(Anno == "2020"),]) #prendo solo i positivi del 2020
month.vector.20 = data.positive.year20$Mese #estraggo i mesi del 2020 in un vettore
month.vector.20.counter = table(month.vector.20) #conto quante volte si ripete ciascun mese nel 2020
barplot(month.vector.20.counter, ylab = "positivi", xlab="mesi 2020")
jpeg("covid+_2020_plot.jpg", width = 1024, height = 768)
barplot(month.vector.20.counter, ylab = "positivi", xlab="mesi 2020")
dev.off()
jpeg("covid+_2021_plot.jpg", width = 1024, height = 768)
barplot(month.vector.21.counter, ylab = "positivi", xlab="mesi 2021")
dev.off()
data = read.csv("C:/Users/alexm/Downloads/out.csv") #leggo il file
data.ordered = data[order(match(data$Mese, month.abb)),] #ordino in base ai mesi
data.positive = subset(data.ordered, Covid == "positivo", select = c(Id, Nome, Cognome, Age, ChatId, Covid, Anno, Mese, Giorno, Weekday, Country)) #creo un subset con solo i positivi
#anno 2021
data.positive.year21 = with(data.positive, data.positive[(Anno == "2021"),]) #prendo solo i positivi del 2021
month.vector.21 = data.positive.year21$Mese #estraggo i mesi del 2021 in un vettore
month.vector.21.counter = table(month.vector.21) #conto quante volte si ripete ciascun mese nel 2021
jpeg("covid+_2021_plot.jpg", width = 1024, height = 768)
barplot(month.vector.21.counter, ylab = "positivi", xlab="mesi 2021")
dev.off()
data
data.ordered
data.positive
data.positive.year20
month.vector.20
month.vector.20.counter
jpeg("covid+_2021_plot.jpg", width = 1024, height = 768)
barplot(month.vector.21.counter, ylab = "positivi", xlab="mesi 2021")
dev.off()
data = read.csv("C:/Users/alexm/Downloads/out.csv") #leggo il file
#data.positive = subset(data, Covid == "positivo", select = c(Id, Nome, Cognome, Age, ChatId, Covid, Anno, Mese, Giorno, Weekday, Country)) #creo un subset con solo i positivi
data.positive = subset(data, Covid == "positivo", select = c(Id, Age, Covid)) #creo un subset con solo i positivi
eta.vector = data.positive$Age #estraggo le età e le mettoin un vettore
eta.vector.sorted = sort(eta.vector, decreasing = FALSE) #li ordino dal più piccolo al più grande
eta.vector.counter = table(eta.vector.sorted) #conto quante volte si ripete ciascun valore di età
library(lattice)
dotplot(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
hystogram(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
library(lattice)
hystogram(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
histogram(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
densityplot(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
barchart(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
bwplot(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
levelplot(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
levelplot(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
xyplot(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
stripplot(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
dotplot(eta.vector.counter~eta.vector.sorted, ylab = "positivi", xlab="età")
eta.vector
eta.vector.counter
eta.vector.sorted
class(eta.vector.sorted)
jpeg("geograpichal_plot.jpg", width = "1024", height = 768)
jpeg("geographycal.plot.jpg", width = 1024, height = 768)
